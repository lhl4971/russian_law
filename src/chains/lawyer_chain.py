import os
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableLambda
from utils.process_query import preprocess_data

# 使用 ChatPromptTemplate 构建可复用的提示词
rewrite_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", """Ты — высококвалифицированный специалист по обработке юридических запросов.
Твоя задача — преобразовать исходный запрос пользователя, который может содержать разговорные выражения, сокращения или неполные формулировки, в точный и формализованный юридический запрос,
пригодный для поиска по базе данных законодательства Российской Федерации.

Требования к преобразованию:
1. Использовать только русский язык, независимо от языка ввода пользователя.
2. Применять официальную юридическую терминологию, устойчивые словосочетания и формулировки, соответствующие текстам нормативных актов РФ.
3. Полностью и точно сохранять юридический смысл и ключевую информацию исходного запроса.
4. Исключить разговорные слова, двусмысленные формулировки и субъективные оценки.
5. При возможности — раскрывать сокращения и аббревиатуры до полного официального наименования.
6. Вывод должен быть строго в виде одного завершённого поискового запроса, без пояснений, комментариев или дополнительных символов.
7. Не добавляй вводных фраз, кавычек, маркировки или служебных слов — только чистый текст запроса.
8. Если исходный запрос содержит несколько языков (например, русский и английский, русский и китайский), обязательно ставь пробел между словами разных языков, чтобы обеспечить корректную обработку и поиск.

Пример:
Ввод: "Кому не нужен временный вид на жительство?"
Вывод: "Категории иностранных граждан, освобождённые от необходимости получения разрешения на временное проживание в Российской Федерации"
"""),
        ("human", "用户查询: {user_query}")
    ]
)


def get_rewrite_chain():
    rewrite_llm = ChatOpenAI(
        model=os.getenv("STD_MIGRATION_MODEL"),
        api_key=os.getenv("STD_MIGRATION_API_KEY"),
        base_url=os.getenv("STD_MIGRATION_URL"),
        temperature=0
    )
    rewrite_chain = RunnableLambda(preprocess_data) | rewrite_prompt | rewrite_llm
    return rewrite_chain
